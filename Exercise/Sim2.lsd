	
Label Root
{
	Son: Firm
	Label Firm
	{
		Var: Cost
		Param: avg
		Param: sd
		Var: Desired
		Param: markup
		Param: weight
		Var: Price
		Var: RandomQ
		Param: qmin
		Param: qmax
		Var: Quality
		Var: Competitiveness
		Param: elasticityP
		Param: elasticityQ
		Var: Market_share
		Param: adjustment
		Var: Normalized

	}

	Var: Avg_Price
	Var: Max_Value
	Var: Ave_Comp
	Var: ConsistencyT
	Var: SumMarketS
	Var: SumNormalized

}


DATA

Object: Root C	1
Var: Avg_Price 0 s + n n
Var: Max_Value 0 s + n n
Var: Ave_Comp 0 s + n n
Var: ConsistencyT 0 s + n n
Var: SumMarketS 0 s + n n
Var: SumNormalized 0 s + n n

Object: Firm C	5
Var: Cost 0 s + n n
Param: avg 0 n + n n	5	1	1	1	1
Param: sd 0 n + n n	1	5	5	5	5
Var: Desired 0 s + n n
Param: markup 0 n + n n	0.5	0.5	0.5	0.5	0.5
Param: weight 0 n + n n	0.5	0.5	0.5	0.5	0.5
Var: Price 1 s + n p	1	1	1	1	1
Var: RandomQ 0 s + n n
Param: qmin 0 n + n n	0	0	0	0	0
Param: qmax 0 n + n n	1	1	1	1	1
Var: Quality 1 s + n n	1	1	1	1	1
Var: Competitiveness 0 s + n n
Param: elasticityP 0 n + n n	1	1	1	1	1
Param: elasticityQ 0 n + n n	1	1	1	1	1
Var: Market_share 1 s + n n	0.2	0.2	0.2	0.2	0.2
Param: adjustment 0 n + n n	0.1	0.1	0.1	0.1	0.1
Var: Normalized 0 s + n n

SIM_NUM 1
SEED 2
MAX_STEP 100
EQUATION fun_Exercise.cpp
MODELREPORT report_Sim1.html

DESCRIPTION

Object_Root

END_DESCRIPTION

Variable_Avg_Price
Use already implemented macros to calculate the average price:
END_DESCRIPTION

Variable_Max_Value
The function calculates the maximum price for a given period.
END_DESCRIPTION

Variable_Ave_Comp
The function calculates the average competitiveness over a period.
END_DESCRIPTION

Variable_ConsistencyT
The function create a variable to check the consistency of the model.
END_DESCRIPTION

Variable_SumMarketS
Soma dos market shares
END_DESCRIPTION

Variable_SumNormalized
Soma dos market shares
END_DESCRIPTION

Object_Firm

END_DESCRIPTION

Variable_Cost
The cost is given by a normal distribution using the parameters avg and sd.
END_DESCRIPTION

Parameter_avg

_INIT_
All 5 instances equal to 1
END_DESCRIPTION

Parameter_sd

_INIT_
All 5 instances equal to 5
END_DESCRIPTION

Variable_Desired
This equation represents the desired price of firm i in period t, that is given by the current unit cost adjusted by a fixed markup.
END_DESCRIPTION

Parameter_markup

_INIT_
All 5 instances equal to 0.5
END_DESCRIPTION

Parameter_weight

_INIT_
All 5 instances equal to 0.5
END_DESCRIPTION

Variable_Price
The price of the firms as a weighted average between the desired price and the market average price in the previous period.
_INIT_
All 5 instances equal to 1
END_DESCRIPTION

Variable_RandomQ
The function generates a random quality component based on a uniform distribution.
END_DESCRIPTION

Parameter_qmin

END_DESCRIPTION

Parameter_qmax

_INIT_
All 5 instances equal to 1
END_DESCRIPTION

Variable_Quality
The function generates a quality 'factor' associated with the firm.
_INIT_
All 5 instances equal to 1
END_DESCRIPTION

Variable_Competitiveness
The function calculates competitiveness based on price, quality and elasticities.
END_DESCRIPTION

Parameter_elasticityP

_INIT_
All 5 instances equal to 1
END_DESCRIPTION

Parameter_elasticityQ

_INIT_
All 5 instances equal to 1
END_DESCRIPTION

Variable_Market_share
The function calculates the market share of firm i in period t.
_INIT_
All 5 instances equal to 0.2
END_DESCRIPTION

Parameter_adjustment

_INIT_
All 5 instances equal to 0.1
END_DESCRIPTION

Variable_Normalized
The function implement a normalization procedure inside the variable that sums the market share.
END_DESCRIPTION


DOCUOBSERVE

END_DOCUOBSERVE


DOCUINITIAL

END_DOCUINITIAL


EQ_FILE
//Exercises: AB models
   
#include "fun_head_fast.h"
   
MODELBEGIN
   
EQUATION("Price")
/*
The price of the firms as a weighted average between the desired price and the market average price in the previous period.
*/
 v[0] = V("weight");
 v[1] = V("Desired");
 v[2] = AVEL("Price", 1);
 v[3] = v[0]*v[1] + (1-v[0])*v[2];
RESULT(v[3] )
  
EQUATION("Desired")
/*
This equation represents the desired price of firm i in period t, that is given by the current unit cost adjusted by a fixed markup.
*/
 v[0] = V("Cost");
 v[1] = V("markup");
 v[2] = (1+v[1])*v[0];
  
RESULT(v[2] )
EQUATION("Cost")
/*
The cost is given by a normal distribution using the parameters avg and sd.
*/
 v[0] = V("avg");
 v[1] = V("sd");
 v[2]=norm(v[0], v[1]);
  
RESULT(v[2] )

EQUATION("Avg_Price")
/*
Use already implemented macros to calculate the average price:
*/

v[0]=0;
v[2]=0;
CYCLE(cur, "Firm")
{
	v[1] = VS(cur,"Price");
	v[0] = v[0] + v[1];  // sum of prices
	v[2] = v[2] + 1;     // count firms  
}

if(v[2]!=0)
v[3] = v[0]/v[2];
else
v[3]=0;

RESULT(v[3])

EQUATION("Max_Value")
/*
The function calculates the maximum price for a given period.
*/
 v[0]=0;
 CYCLE(cur, "Firm")
 {
   v[1] = VS(cur,"Price");
   if(v[1] > v[0])
   v[0] = v[1];
 }
RESULT(v[0])  

EQUATION("Quality")
/*
The function generates a quality 'factor' associated with the firm.
*/

v[0] = V("RandomQ");
v[1] = VL("Quality", 1);
v[2] = v[1] + v[2];

RESULT(v[2])

EQUATION("RandomQ")
/*
The function generates a random quality component based on a uniform distribution.
*/

v[0] = V("qmin");
v[1] = V("qmax");
v[2] = uniform(v[0], v[1]);

RESULT(v[2])

EQUATION("Competitiveness")
/*
The function calculates competitiveness based on price, quality and elasticities.
*/

v[0] = V("elasticityQ");
v[1] = V("elasticityP");

v[2] = pow(V("Quality"),v[0]);
v[3] = pow(V("Price"),v[1]); 

if(v[3]==0)
v[4] = 0;
else
v[4] = v[2]/v[3];

RESULT(v[4])

EQUATION("Ave_Comp")
/*
The function calculates the average competitiveness over a period.
*/

v[0] = AVE("Competitiveness");

RESULT(v[0])

EQUATION("Market_share")
/*
The function calculates the market share of firm i in period t.
*/

v[0] = VL("Market_share",1);
v[1] = V("adjustment"); //?j is market share adjustment parameter of sector j and 0 < ?j < 1
v[2] = V("Competitiveness");
v[3] = V("Ave_Comp");

v[4] = v[0]*(1+v[1]*((v[2]/v[3])-1));

RESULT(v[4])

EQUATION("ConsistencyT")
/*
The function create a variable to check the consistency of the model.
*/

if(SUM("Market_share") == 1)
v[0] = 0;
else
v[0] = 1;

RESULT(v[0])

EQUATION("SumMarketS")
/*
Soma dos market shares
*/

v[0] = SUM("Market_share");

RESULT(v[0])


EQUATION("Normalized")
/*
The function implement a normalization procedure inside the variable that sums the market share.
*/
v[0] = V("SumMarketS");
v[1] = V("Market_share");
v[2] = v[1]/v[0];
WRITE("Market_share",v[2]);

RESULT(v[2])

EQUATION("SumNormalized")
/*
Soma dos market shares
*/

v[0] = SUM("Normalized");

RESULT(v[0])
  
MODELEND
// do not add Equations in this area
void close_sim( void )
{
// close simulation special commands go here
} 

END_EQ_FILE
